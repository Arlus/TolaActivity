# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-19 08:07
from __future__ import unicode_literals

from decimal import Decimal
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CollectedData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=255, unique=True, verbose_name=b'Data UUID')),
                ('achieved', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name=b'Achieved')),
                ('description', models.TextField(blank=True, null=True, verbose_name=b'Remarks/comments')),
                ('date_collected', models.DateTimeField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, max_length=255, null=True, verbose_name=b'Comment/Explanation')),
                ('update_count_tola_table', models.BooleanField(default=False, verbose_name=b'Would you like to update the achieved total with the row count from TolaTables?')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('workflowlevel2', 'indicator', 'date_collected', 'create_date'),
                'verbose_name_plural': 'Indicator Output/Outcome Collected Data',
            },
        ),
        migrations.CreateModel(
            name='DisaggregationLabel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=765)),
                ('customsort', models.IntegerField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DisaggregationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disaggregation_type', models.CharField(blank=True, max_length=135)),
                ('description', models.CharField(blank=True, max_length=765)),
                ('standard', models.BooleanField(default=False, verbose_name=b'Standard')),
                ('default_global', models.BooleanField(default=False)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DisaggregationValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=765)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('service_url', models.CharField(blank=True, max_length=765)),
                ('feed_url', models.CharField(blank=True, max_length=765)),
                ('default_global', models.BooleanField(default=0)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExternalServiceRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_url', models.CharField(blank=True, max_length=765)),
                ('record_id', models.CharField(blank=True, max_length=765, verbose_name=b'Unique ID')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(blank=True, max_length=135)),
                ('description', models.CharField(blank=True, max_length=765)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('numdays', models.PositiveIntegerField(default=0, verbose_name=b'Frequency in number of days')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalCollectedData',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('data_uuid', models.CharField(blank=True, db_index=True, default=uuid.uuid4, max_length=255, verbose_name=b'Data UUID')),
                ('achieved', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20, verbose_name=b'Achieved')),
                ('description', models.TextField(blank=True, null=True, verbose_name=b'Remarks/comments')),
                ('date_collected', models.DateTimeField(blank=True, null=True)),
                ('comment', models.TextField(blank=True, max_length=255, null=True, verbose_name=b'Comment/Explanation')),
                ('update_count_tola_table', models.BooleanField(default=False, verbose_name=b'Would you like to update the achieved total with the row count from TolaTables?')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical collected data',
            },
        ),
        migrations.CreateModel(
            name='HistoricalIndicator',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('indicator_uuid', models.CharField(blank=True, db_index=True, default=uuid.uuid4, max_length=255, verbose_name=b'Indicator UUID')),
                ('name', models.CharField(max_length=255)),
                ('number', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('justification', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Rationale or Justification for Indicator')),
                ('unit_of_measure', models.CharField(blank=True, max_length=135, null=True, verbose_name=b'Unit of Measure')),
                ('baseline', models.CharField(blank=True, max_length=255, null=True)),
                ('lop_target', models.IntegerField(blank=True, default=0, verbose_name=b'LOP Target')),
                ('rationale_for_target', models.TextField(blank=True, max_length=255, null=True)),
                ('means_of_verification', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Means of Verification / Data Source')),
                ('data_collection_method', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Data Collection Method')),
                ('data_points', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Data Points')),
                ('responsible_person', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Responsible Person(s) and Team')),
                ('method_of_analysis', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Method of Analysis')),
                ('information_use', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Information Use')),
                ('quality_assurance', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Quality Assurance Measures')),
                ('data_issues', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Data Issues')),
                ('indicator_changes', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Changes to Indicator')),
                ('comments', models.TextField(blank=True, max_length=255, null=True)),
                ('key_performance_indicator', models.BooleanField(default=False, verbose_name=b'Key Performance Indicator?')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
                'verbose_name': 'historical indicator',
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_uuid', models.CharField(blank=True, default=uuid.uuid4, max_length=255, unique=True, verbose_name=b'Indicator UUID')),
                ('name', models.CharField(max_length=255)),
                ('number', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('definition', models.TextField(blank=True, null=True)),
                ('justification', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Rationale or Justification for Indicator')),
                ('unit_of_measure', models.CharField(blank=True, max_length=135, null=True, verbose_name=b'Unit of Measure')),
                ('baseline', models.CharField(blank=True, max_length=255, null=True)),
                ('lop_target', models.IntegerField(blank=True, default=0, verbose_name=b'LOP Target')),
                ('rationale_for_target', models.TextField(blank=True, max_length=255, null=True)),
                ('means_of_verification', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Means of Verification / Data Source')),
                ('data_collection_method', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Data Collection Method')),
                ('data_points', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Data Points')),
                ('responsible_person', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Responsible Person(s) and Team')),
                ('method_of_analysis', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Method of Analysis')),
                ('information_use', models.CharField(blank=True, max_length=255, null=True, verbose_name=b'Information Use')),
                ('quality_assurance', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Quality Assurance Measures')),
                ('data_issues', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Data Issues')),
                ('indicator_changes', models.TextField(blank=True, max_length=500, null=True, verbose_name=b'Changes to Indicator')),
                ('comments', models.TextField(blank=True, max_length=255, null=True)),
                ('key_performance_indicator', models.BooleanField(default=False, verbose_name=b'Key Performance Indicator?')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
            ],
            options={
                'ordering': ('create_date',),
                'permissions': (('view_indicator', 'View Indicator Model'),),
            },
        ),
        migrations.CreateModel(
            name='IndicatorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('indicator_type', models.CharField(blank=True, max_length=135)),
                ('description', models.TextField(blank=True, max_length=765)),
                ('default_global', models.BooleanField(default=0)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=135)),
                ('sort', models.IntegerField(default=0)),
                ('parent_id', models.IntegerField(default=0)),
                ('global_default', models.BooleanField(default=0)),
                ('description', models.TextField(blank=True, max_length=765)),
                ('color', models.CharField(blank=True, max_length=135)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Objective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=135)),
                ('description', models.TextField(blank=True, max_length=765)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('workflowlevel1', 'name'),
            },
        ),
        migrations.CreateModel(
            name='PeriodicTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(blank=True, max_length=255, null=True)),
                ('target', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=20)),
                ('customsort', models.IntegerField(blank=True, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReportingPeriod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StrategicObjective',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=135)),
                ('description', models.TextField(blank=True, max_length=765)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('country', 'name'),
            },
        ),
        migrations.CreateModel(
            name='TolaTable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('table_id', models.IntegerField(blank=True, null=True)),
                ('remote_owner', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.CharField(blank=True, max_length=255)),
                ('unique_count', models.IntegerField(blank=True, null=True)),
                ('count_column_name_1', models.CharField(blank=True, max_length=255, null=True)),
                ('count_column_name_2', models.CharField(blank=True, max_length=255, null=True)),
                ('column_sum', models.IntegerField(blank=True, default=0, null=True)),
                ('column_avg', models.IntegerField(blank=True, default=0, null=True)),
                ('refresh_interval', models.IntegerField(blank=True, default=0, null=True)),
                ('create_date', models.DateTimeField(blank=True, null=True)),
                ('edit_date', models.DateTimeField(blank=True, null=True)),
            ],
        ),
    ]
